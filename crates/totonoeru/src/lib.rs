use serde::{Deserialize, Deserializer};
pub use totonoeru_derive::Config;

pub mod env {
    use std::ffi::OsString;

    pub trait EnvProvider {
        type FetchError;

        fn fetch(&self, key: impl AsRef<str>) -> Result<Option<String>, Self::FetchError>;
    }

    pub struct StdEnv;

    pub enum StdEnvFetchError {
        NotUnicode(OsString),
    }

    impl StdEnv {
        pub fn new() -> Self {
            Self
        }
    }

    impl EnvProvider for StdEnv {
        type FetchError = StdEnvFetchError;

        fn fetch(&self, key: impl AsRef<str>) -> Result<Option<String>, Self::FetchError> {
            use std::env::{var, VarError};

            match var(key.as_ref()) {
                Ok(x) => Ok(Some(x)),
                Err(VarError::NotPresent) => Ok(None),
                Err(VarError::NotUnicode(os)) => Err(StdEnvFetchError::NotUnicode(os)),
            }
        }
    }
}

pub mod sources {
    pub struct Json;

    trait FromFile {}
}

/// Common trait for configuration partials. Its implementation is generated by [`Config`] macro.
pub trait Partial {
    type Resolved;

    /// Construct a partial with all empty fields.
    fn empty() -> Self;

    /// Construct a partial with default values.
    fn default() -> Self;

    /// Construct a partial from a [`Deserializer`]
    fn parse<'de, D>(deserializer: D) -> Result<Self, ParseError>
    where
        D: Deserializer<'de>,
        Self: Deserialize<'de>;

    /// Construct a partial from environment variables.
    fn parse_env<P, E>(provider: P) -> Result<Self, E>
    where
        Self: Sized,
        P: env::EnvProvider<FetchError = E>;

    /// Merge a partial with another partial.
    ///
    /// Merge strategies might be customised through macro attributes. (TODO)
    fn merge(self, other: Self) -> Self;

    /// "Unwrap" a partial with all required fields presented as actual values instead
    /// of [`Option`]s.
    fn resolve(self) -> Result<Self::Resolved, ResolveError>;

    /// Shorthand for parsing the same partial ([`Self::parse`]) and merging the result
    /// ([`Self::merge`]).
    fn parse_and_merge<'de, D>(self, deserializer: D) -> Result<Self, ParseError>
    where
        D: Deserializer<'de>,
        Self: Deserialize<'de>,
    {
        Self::parse(deserializer).map(|parsed| self.merge(parsed))
    }

    /// Shorthand for parsing the same partial from env ([`Self::parse_env`]) and merging
    /// the result ([`Self::merge`]).
    fn parse_env_and_merge<P, E>(self, provider: P) -> Result<Self, E>
    where
        Self: Sized,
        P: env::EnvProvider<FetchError = E>,
    {
        Self::parse_env(provider).map(|parsed| self.merge(parsed))
    }
}

pub struct ParseError;

pub struct ResolveError;
